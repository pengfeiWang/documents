<!DOCTYPE HTML>
<head>
<meta charset="utf-8">
<meta content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"  name="viewport" >
<meta content="yes" name="apple-mobile-web-app-capable" />
<meta content="black" name="apple-mobile-web-app-status-bar-style" />
<meta content="telephone=no" name="format-detection" />
<title>markdown Editor</title>
<meta name="Description" content="">
<meta name="Keywords" content="">
<link rel="stylesheet" href="/css/main.css">
<link rel="stylesheet" href="/css/inner.css">
<link rel="stylesheet" href="/css/github.css">
</head>
<body>
<div id="container">
<pre id="inp"></pre>
<div id="preview"></div>
</div>

<script src="/js/markdown.js"></script>
<script src="/js/highlight.js"></script>
<script src="/js/side.js"></script>
<script src="/js/src/ace.js"></script>
<script src="/js/hlig.js"></script>
<script src="/js/marked.js"></script>
<script>
    var editor = ace.edit("inp"),
    preview = document.getElementById('preview');
    editor.getSession().setMode("ace/mode/markdown"),
    editor.setTheme("ace/theme/xcode");

    editor.renderer.setShowGutter(false);
    editor.setAutoScrollEditorIntoView(true);

    editor.setOption("maxLines", 6000);
    editor.setOption("minLines", 50);

    editor.getSession().setUseWrapMode(!0)
    editor.setShowPrintMargin(!1)

    window.editor = editor;
    editor.resize(true);

    var renderer = new marked.Renderer();

    renderer.heading = function (text, level) {
      var escapedText = text.toLowerCase().replace(/[^\w]+/g, '-');
      return '<h' + level + ' id="'+text.replace(/\s+/g,'-')+'">'+ text + '</h' + level + '>';
    }
    renderer.link = function(href, title, text) {
      if (this.options.sanitize) {
        try {
          var prot = decodeURIComponent(unescape(href))
            .replace(/[^\w:]/g, '')
            .toLowerCase();
        } catch (e) {
          return '';
        }
        if (prot.indexOf('javascript:') === 0) {
          return '';
        }
      }
      var out = '<a href="' + href + '"';
      if (title) {
        out += ' title="' + title + '"';
      }
      out += ' target="_blank">' + text + '</a>';
      return out;
    };
    renderer.code = function(code, lang, escaped) {
      
      code = code.replace(/\</g, '&lt;').replace(/\>/g,'&gt;');
      if (!lang) {
        return '<pre><code>'
        + code
        + '\n</code></pre>';
      }

      if( /demo/i.test(lang) ) {
        return '<a href="javascript:;" data-code="'
          + code
          + '">'
          + 'DEMO\n</a>\n';
      } else {
        return '<pre><code class="'
          + this.options.langPrefix
          + escape(lang, true)
          + '">'
          + code
          + '\n</code></pre>\n';        
      }

    };
    editor.on("change", function(e){
      preview.innerHTML = marked( editor.getSession().getValue(), { renderer: renderer } );
      var pre = preview.getElementsByTagName('pre');
      window.sideHand();
      if( pre && hlig )  {
        hlig( pre );
      }
    });
    window.sideHand();
</script>
</body>
</html>